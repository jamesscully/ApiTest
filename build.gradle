/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    id 'org.springframework.boot' version '2.0.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceCompatibility= 1.8

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'

    implementation 'org.springframework.boot:spring-boot-dependencies:2.0.5.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    components {
        withModule('org.springframework:spring-beans') {
            allVariants {
                withDependencyConstraints {
                    // Need to patch constraints because snakeyaml is an optional dependency
                    it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }
                }
            }
        }
    }


    compile 'org.json:json:20190722'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'



}

application {
    // Define the main class for the application.
    mainClassName = 'com.scully.Part1A'


}

// declare locations of class files
def partA = 'com.scully.Part1A'
def partB = 'com.scully.Part1B'
def partC = 'com.scully.Part1C'

test {
    // Use junit platform for unit tests
    useJUnitPlatform()
}

task jarPartA(type: org.gradle.jvm.tasks.Jar) {
    manifest { attributes("Main-Class": partA) }
    baseName(project.name + '-taskA')
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    } with jar
}

task jarPartB(type: org.gradle.jvm.tasks.Jar) {
    manifest { attributes("Main-Class": partB) }
    baseName(project.name + '-taskB')
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    } with jar
}

task jarPartC(type: org.gradle.jvm.tasks.Jar) {
    manifest { attributes("Main-Class" : partC) }
    baseName(project.name + '-taskC')
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    } with jar
}
